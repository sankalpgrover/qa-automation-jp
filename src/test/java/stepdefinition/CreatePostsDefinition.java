package stepdefinition;

import assertions.SoftAssertions;
import com.google.gson.Gson;
import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.Scenario;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.restassured.RestAssured;
import io.restassured.module.jsv.JsonSchemaValidator;
import io.restassured.response.Response;
import io.restassured.specification.FilterableRequestSpecification;
import models.requestmodels.posts.CreatePost;
import org.testng.asserts.SoftAssert;
import utils.EndPoints;
import utils.RequestMethods;
import java.io.File;
import static io.restassured.RestAssured.given;


public class CreatePostsDefinition {

    Scenario scenario;
    Response response;
    Gson gson = new Gson();
    SoftAssert softAssert;
    SoftAssertions customAssertions;
    EndPoints endpoint = new EndPoints();
    FilterableRequestSpecification requestSpecification;
    RequestMethods requestMethods = new RequestMethods();


    /**
     * Before feature
     *
     * @param scenario the scenario
     */

    @Before
    public void beforeEachScenario(Scenario scenario) {
        RestAssured.reset();
        this.scenario = scenario;
        softAssert = new SoftAssert();
        customAssertions = new SoftAssertions(softAssert);
    }

    @Given("A user with details as postId {string},userId {string},title {string},body {string}")
    public void a_user_with_details_as_post_id_user_id_title_body(String postId, String userId, String title, String body) {
        CreatePost createPost = new CreatePost();
        createPost.setId(postId);
        createPost.setUserId(userId);
        createPost.setTitle(title);
        createPost.setBody(body);

        requestSpecification = (FilterableRequestSpecification) given()
                .body(gson.toJson(createPost));

    }

    @When("hits POST call with request payload to create a new Post")
    public void hits_post_call_with_request_payload_to_create_a_new_post() {
        requestSpecification.basePath(endpoint.getPostsEndpoint());
        scenario.log("Request Payload:  " + requestSpecification.<String>getBody());
        response = requestMethods.postRequest(requestSpecification, scenario);

    }

    @Then("validate status code after creating a new post")
    public void validate_status_code_after_creating_a_new_post() {
        scenario.log(response.getStatusLine());
        customAssertions.assertTrue(response.getStatusCode(), 201, scenario);
    }

    @Then("validate schema of the json response after creating a new post")
    public void validate_schema_of_the_json_response_after_creating_a_new_post() {
        File file = new File(System.getProperty("user.dir") + "/src/main/resources/schemas/createPost.json");
        scenario.log("Validating response schema with " + file.getName());
        response.then().assertThat().body(JsonSchemaValidator.matchesJsonSchema(file));
    }

    @Then("validate postId {string},userId {string},title {string}, body {string}")
    public void validate_post_id_id_name_body(String postId, String userId, String title, String body) {
        CreatePost createPost = gson.fromJson(response.getBody().asString(), CreatePost.class);
        // This id is autogenerated from List of users and is intentionally failing to demonstrate soft assertion
        // can be fixed and validated using GET api call and fetching max(id)
        customAssertions.assertEquals(String.valueOf(postId), String.valueOf(createPost.getId()), scenario);
        customAssertions.assertEquals(userId, createPost.getUserId(), scenario);
        customAssertions.assertEquals(title, createPost.getTitle(), scenario);
        customAssertions.assertEquals(body, createPost.getBody(), scenario);

    }

    @When("hits PATCH request with request payload to update an existing post with id {string}")
    public void hits_PATCH_request_with_request_payload_to_update_an_existing_post(String postId) {
        requestSpecification.basePath(endpoint.getPostsEndpointWithPathParam())
        .pathParam("postId",postId);
        scenario.log("Request Payload:  " + requestSpecification.<String>getBody());
        response = requestMethods.updateRequest(requestSpecification, scenario);
    }

    @Then("validate status code after updating an existing post")
    public void validate_status_code_after_updating_an_existing_post() {
        scenario.log(response.getStatusLine());
        customAssertions.assertTrue(response.getStatusCode(), 200, scenario);
    }



    @After
    public void afterEveryScenario() {
        softAssert.assertAll();
    }


}
